#!/usr/bin/ksh

# -----------------------------------------------------------------------------
# Cron-Ready Script: booking.sh
# -----------------------------------------------------------------------------

PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/app/cert77/product/bin
export PATH
export LD_LIBRARY_PATH=/app/cert77/lib:$LD_LIBRARY_PATH
export SHELL=/usr/bin/ksh
export HOME=/home/youruser         # 🔁 Change to actual home path
export LOGNAME=youruser            # 🔁 Change to actual user name

INPUT_FILE="/app/cert77/site/cfg/istparam.cfg"
TMP_FILE="${INPUT_FILE}.tmp"
BACKUP_FILE="${INPUT_FILE}.bak"
MAKE_BACKUP=false
MAKE_LOG=false
LOG_FILE=""

# Default log location for cron safety
DEFAULT_CRON_LOG="/tmp/booking_cron.log"

# Function to show help
show_help() {
    echo "Usage: $0 [-e] [-l] name:ip [name2:ip2 ...]"
    exit 1
}

# Parse options
ARGUMENTS=""
while [ $# -gt 0 ]; do
    case "$1" in
        -e) MAKE_BACKUP=true ;;
        -l) MAKE_LOG=true ; LOG_FILE="istparam_update_$(date +%Y%m%d_%H%M%S).log" ;;
        -h|--help) show_help ;;
        -*) echo "Unknown option: $1"; show_help ;;
        *) ARGUMENTS="${ARGUMENTS} $1" ;;
    esac
    shift
done

[ -z "$ARGUMENTS" ] && echo "Error: No name:ip arguments given" && show_help

# Set fallback log if needed
[ "$MAKE_LOG" = false ] && LOG_FILE="$DEFAULT_CRON_LOG"

echo "[$(date)] Script started. Args: $ARGUMENTS" >> "$LOG_FILE"

# Backup
if $MAKE_BACKUP; then
    cp "$INPUT_FILE" "$BACKUP_FILE" && echo "Backup created: $BACKUP_FILE" >> "$LOG_FILE"
fi

cp "$INPUT_FILE" "$TMP_FILE"
> "$TMP_FILE.new"

start_time=$(date +%s)
processed_ports=""

while IFS= read -r line || [ -n "$line" ]; do
    processed=false
    for arg in $ARGUMENTS; do
        name=$(echo "$arg" | cut -d':' -f1)
        ip=$(echo "$arg" | cut -d':' -f2)

        first_word=$(echo "$line" | cut -d' ' -f1)
        second_word=$(echo "$line" | cut -d' ' -f3)

        if [ "$first_word" = "port.name" ] || [ "$first_word" = "#port.name" ]; then
            port_line_name="$second_word"
        else
            continue
        fi

        if [ "$port_line_name" = "$name" ]; then
            echo "$line" | grep -q "$ip"
            ip_present=$?

            echo "$line" | grep -qE '([0-9]+\.){3}[0-9]+'
            has_ip=$?

            case "$line" in
                \#port.name*)
                    if [ "$ip_present" -eq 0 ]; then
                        echo "${line#\#}" >> "$TMP_FILE.new"
                        echo "[$(date)] Unhashed: ${line#\#}" >> "$LOG_FILE"
                        processed=true
                        processed_ports="$processed_ports $name"
                        break
                    fi
                    ;;
                port.name*)
                    if [ "$has_ip" -eq 0 ] && [ "$ip_present" -ne 0 ]; then
                        echo "#$line" >> "$TMP_FILE.new"
                        echo "[$(date)] Hashed: $line" >> "$LOG_FILE"
                        processed=true
                        processed_ports="$processed_ports $name"
                        break
                    fi
                    ;;
            esac
        fi
    done
    [ "$processed" = false ] && echo "$line" >> "$TMP_FILE.new"
done < "$TMP_FILE"

mv "$TMP_FILE.new" "$INPUT_FILE"
rm -f "$TMP_FILE"

echo "[$(date)] istparam.cfg updated." >> "$LOG_FILE"

# Restart logic
restart_port() {
    route_name=$1
    cmd_name=$2
    port_id=$3

    /app/cert77/product/bin/shccmd send 9002 to 1 "$port_id" </dev/null >> "$LOG_FILE" 2>&1
    /app/cert77/product/bin/mbportcmd stop "$route_name" </dev/null >> "$LOG_FILE" 2>&1
    sleep 2
    /app/cert77/product/bin/mbportcmd add port "$route_name" </dev/null >> "$LOG_FILE" 2>&1
    sleep 2
    /app/cert77/product/bin/mbportcmd start "$route_name" </dev/null >> "$LOG_FILE" 2>&1
    sleep 2
    /app/cert77/product/bin/shccmd send 9001 to 1 "$port_id" </dev/null >> "$LOG_FILE" 2>&1
    sleep 2
    /app/cert77/product/bin/mbportcmd l "$route_name" </dev/null >> "$LOG_FILE" 2>&1
    echo "[$(date)] $route_name restart completed" >> "$LOG_FILE"
}

echo "$processed_ports" | grep -q "VisaRoute" && restart_port "visaroute" "visaredo" 4
echo "$processed_ports" | grep -q "MasterCardRoute" && restart_port "MasterCardRoute" "mcredo" 5
echo "$processed_ports" | grep -q "DinersRoute" && restart_port "DinersRoute" "dredo" 7

end_time=$(date +%s)
elapsed_time=$((end_time - start_time))

echo "[$(date)] Script execution time: $elapsed_time seconds" >> "$LOG_FILE"